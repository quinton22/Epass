import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart';

class VulnerabilityDisplay extends ModalRoute {
  double top;
  double bottom;
  double left;
  double right;
  Color bgColor;
  final Widget child;

  VulnerabilityDisplay(
      {Key key,
      this.bgColor,
      @required this.child,
      this.top,
      this.bottom,
      this.left,
      this.right});

  @override
  Duration get transitionDuration => Duration(milliseconds: 300);
  @override
  bool get opaque => false;
  @override
  bool get barrierDismissible => false;
  @override
  Color get barrierColor =>
      bgColor == null ? Colors.black.withOpacity(0.5) : bgColor;
  @override
  String get barrierLabel => null;
  @override
  bool get maintainState => false;

  @override
  Widget buildPage(BuildContext context, Animation<double> animation,
      Animation<double> secondaryAnimation) {
    if (top == null) this.top = 10;
    if (bottom == null) this.bottom = 20;
    if (left == null) this.left = 20;
    if (right == null) this.right = 20;

    return GestureDetector(
      onTap: () {
        // call this method here to hide soft keyboard
        SystemChannels.textInput.invokeMethod('TextInput.hide');
      },
      child: Material(
        // This makes sure that text and other content follows the material style
        type: MaterialType.transparency,
        //type: MaterialType.canvas,
        // make sure that the overlay content is not cut off
        child: SafeArea(
          bottom: true,
          child: _buildOverlayContent(context),
        ),
      ),
    );
  }

  //the dynamic content pass by parameter
  Widget _buildOverlayContent(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(
        bottom: this.bottom,
        left: this.left,
        right: this.right,
        top: this.top,
      ),
      child: child,
    );
  }

  @override
  Widget buildTransitions(BuildContext context, Animation<double> animation,
      Animation<double> secondaryAnimation, Widget child) {
    // You can add your own animations for the overlay content
    return FadeTransition(
      opacity: animation,
      child: ScaleTransition(
        scale: animation,
        child: child,
      ),
    );
  }
}

class DisplayContent extends StatefulWidget {
  final vuln;
  final Color color;
  final int timeLeft;

  DisplayContent({
    Key key,
    @required this.vuln,
    @required this.color,
    this.timeLeft,
  }) : super(key: key);

  @override
  _DisplayContentState createState() => _DisplayContentState();
}

class _DisplayContentState extends State<DisplayContent> {
  _launchUrl(url) async {
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.vuln == null && widget.timeLeft != null
            ? 'Change Password'
            : 'Account at Risk'),
        leading: new Builder(builder: (context) {
          return IconButton(
            icon: Icon(Icons.arrow_back),
            onPressed: () {
              try {
                Navigator.of(context).pop(); //close the popup
              } catch (e) {}
            },
          );
        }),
        backgroundColor: widget.color,
        brightness: Brightness.light,
      ),
      resizeToAvoidBottomPadding: false,
      body: SingleChildScrollView(
        child: Container(
          color: Color(0x22FFFFFF),
          padding: const EdgeInsets.all(16.0),
          child: widget.vuln == null && widget.timeLeft != null
              ? Container(
                  width: double.infinity,
                  child: Text(widget.timeLeft <= 0
                      ? 'Change password now! You are ${(-widget.timeLeft / 86400000).toStringAsFixed(2)} days late.'
                      : 'Change password in ${(widget.timeLeft / 86400000).toStringAsFixed(2)} days.'),
                )
              : Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: <Widget>[
                    Padding(
                      padding: const EdgeInsets.only(bottom: 8.0),
                      child: Row(
                        mainAxisSize: MainAxisSize.max,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        textBaseline: TextBaseline.alphabetic,
                        children: <Widget>[
                          if (widget.vuln['LogoPath'] != null)
                            Image.network(
                              widget.vuln['LogoPath'],
                              width: 32.0,
                              height: 32.0,
                            ),
                          SizedBox(
                            width: 16.0,
                          ),
                          Expanded(
                            child: Text(
                              '${widget.vuln['Title']}',
                              style: Theme.of(context).textTheme.title,
                              softWrap: true,
                              overflow: TextOverflow.fade,
                            ),
                          ),
                          //Spacer(),
                          Text(
                            DateFormat.yMd().format(
                                DateTime.parse(widget.vuln['BreachDate'])),
                            textAlign: TextAlign.right,
                            style: TextStyle(
                              height: 2,
                            ),
                          ),
                        ],
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4.0),
                      child:
                          Text('${widget.vuln['PwnCount']} accounts affected'),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4.0),
                      child: Text(
                          '${(widget.vuln['DataClasses'] as List).join(', ')}'),
                    ),
                    // IsSensitive, IsVerified
                    Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4.0),
                      child: Html(
                        data: widget.vuln['Description'],
                        onLinkTap: _launchUrl,
                      ),
                    ),
                  ],
                ),
        ),
      ),
    );
  }
}
